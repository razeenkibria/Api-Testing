{
	"info": {
		"_postman_id": "743be816-3134-40fe-8449-3bbb38b60fc6",
		"name": "Batch29",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39626319"
	},
	"item": [
		{
			"name": "Create booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstname=pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(firstname)\r",
							"pm.environment.set(\"firstname\",firstname)\r",
							"\r",
							"//LastName\r",
							"var lastname=pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(lastname)\r",
							"pm.environment.set(\"lastname\",lastname)\r",
							"\r",
							"//TotalPrice\r",
							" var totalprice=pm.environment.replaceIn(\"{{$randomInt}}\")\r",
							" console.log(totalprice)\r",
							" pm.environment.set(\"totalprice\",totalprice)\r",
							"\r",
							" //Deposited\r",
							" var depositpaid=pm.environment.replaceIn(\"{{$randomBoolean}}\")\r",
							" console.log(depositpaid)\r",
							" pm.environment.set(\"depositpaid\",depositpaid)\r",
							"\r",
							"//Additionalneeds \r",
							" var additionalneeds=pm.environment.replaceIn(\"{{$randomProduct}}\")\r",
							" console.log(additionalneeds)\r",
							" pm.environment.set(\"additionalneeds\",additionalneeds)\r",
							"\r",
							" //DATE \r",
							"\r",
							" const moment=require('moment')\r",
							" const today=moment()\r",
							" //console.log(today.format(\"YYYY-MM-DD\"))\r",
							" var checkin=today.format(\"YYYY-MM-DD\")\r",
							" pm.environment.set(\"checkin\",checkin)\r",
							"\r",
							" var checkout=today.format(\"YYYY-MM-DD\")\r",
							" pm.environment.set(\"checkout\",checkout)\r",
							"\r",
							"\r",
							" "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=pm.response.json()\r",
							"pm.environment.set(\"id\",jsonData.bookingid)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstname}}\",\r\n\t\"lastname\" : \"{{lastname}}\",\r\n\t\"totalprice\" : {{totalprice}},\r\n\t\"depositpaid\" : {{depositpaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var StatusCode=pm.response.code\r",
							"console.log(StatusCode)\r",
							"\r",
							"if(StatusCode==200){\r",
							"    var json=pm.response.json()\r",
							"\r",
							"\r",
							"pm.test(\"first name validation\",function(){\r",
							"    pm.expect(json.firstname).to.eql(pm.environment.get(\"firstname\"))\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"last name validation\",function(){\r",
							"    pm.expect(json.lastname).to.eql(pm.environment.get(\"lastname\"))\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"totalprice  validation\",function(){\r",
							"    pm.expect(json.totalprice.toString()).to.eql(pm.environment.get(\"totalprice\"))\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"depositpaid  validation\",function(){\r",
							"    pm.expect(json.depositpaid.toString()).to.eql(pm.environment.get(\"depositpaid\"))\r",
							"})\r",
							"}\r",
							"else if(StatusCode==201){\r",
							"pm.test(\"New account register\")\r",
							"}\r",
							"\r",
							"else if(StatusCode==400){\r",
							"pm.test(\"invalid parameter ,unsupported ch .the server can't process request\")\r",
							"}\r",
							"\r",
							"else if(StatusCode==401){\r",
							"pm.test(\"Unauthorized\")\r",
							"}\r",
							"\r",
							"else if(StatusCode==403){\r",
							"pm.test(\"forbidden\")\r",
							"}\r",
							"\r",
							"else if(StatusCode==404){\r",
							"pm.test(\"Not found\")\r",
							"}\r",
							"\r",
							"else if(StatusCode==429){\r",
							"pm.test(\"Too many Request\")\r",
							"}\r",
							"\r",
							"else if(StatusCode==500){\r",
							"pm.test(\"Internal server error\")\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=pm.response.json()\r",
							"pm.environment.set(\"Access_token\",jsonData.token)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var Update_firstname=pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(Update_firstname)\r",
							"pm.environment.set(\"Update_firstname\",Update_firstname)\r",
							"\r",
							"//LastName\r",
							"var Update_lastname=pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(Update_lastname)\r",
							"pm.environment.set(\"Update_lastname\",Update_lastname)\r",
							"\r",
							"//TotalPrice\r",
							" var Update_totalprice=pm.environment.replaceIn(\"{{$randomInt}}\")\r",
							" console.log(Update_totalprice)\r",
							" pm.environment.set(\"Update_totalprice\",Update_totalprice)\r",
							"\r",
							" //Deposited\r",
							" var Update_depositpaid=pm.environment.replaceIn(\"{{$randomBoolean}}\")\r",
							" console.log(Update_depositpaid)\r",
							" pm.environment.set(\"Update_depositpaid\",Update_depositpaid)\r",
							"\r",
							" //Additionalneeds \r",
							" var Update_additionalneeds=pm.environment.replaceIn(\"{{$randomProduct}}\")\r",
							" console.log(Update_additionalneeds)\r",
							" pm.environment.set(\"Update_additionalneeds\",Update_additionalneeds)\r",
							"\r",
							"const moment=require('moment')\r",
							" const today=moment()\r",
							" //console.log(today.format(\"YYYY-MM-DD\"))\r",
							" var checkin=today.format(\"YYYY-MM-DD\")\r",
							" pm.environment.set(\"checkin\",checkin)\r",
							"\r",
							"var checkout=today.format(\"YYYY-MM-DD\")\r",
							" pm.environment.set(\"checkout\",checkout)\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{Access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{Update_firstname}}\",\r\n\t\"lastname\" : \"{{Update_lastname}}\",\r\n\t\"totalprice\" : {{Update_totalprice}},\r\n\t\"depositpaid\" : {{Update_depositpaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"2019-01-01\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{Update_additionalneeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify after update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var StatusCode=pm.response.code\r",
							"console.log(StatusCode)\r",
							"\r",
							"if(StatusCode==200){\r",
							"   var json= pm.response.json()\r",
							"\r",
							"\r",
							"pm.test(\"Update_firstname validation\",function(){\r",
							"    pm.expect(json.firstname).to.eql(pm.environment.get(\"Update_firstname\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Update_lastname\",function(){\r",
							"    pm.expect(json.lastname).to.eql(pm.environment.get(\"Update_lastname\"))\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Update_totalprice validation\",function(){\r",
							"    pm.expect(json.totalprice.toString()).to.eql(pm.environment.get(\"Update_totalprice\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Update_depositpaid  validation\",function(){\r",
							"    pm.expect(json.depositpaid.toString()).to.eql(pm.environment.get(\"Update_depositpaid\"))\r",
							"})\r",
							"}\r",
							"else if(StatusCode==201){\r",
							"pm.test(\"New account register\")\r",
							"}\r",
							"\r",
							"else if(StatusCode==400){\r",
							"pm.test(\"invalid parameter ,unsupported ch .the server can't process request\")\r",
							"}\r",
							"\r",
							"else if(StatusCode==401){\r",
							"pm.test(\"Unauthorized\")\r",
							"}\r",
							"\r",
							"else if(StatusCode==403){\r",
							"pm.test(\"forbidden\")\r",
							"}\r",
							"\r",
							"else if(StatusCode==404){\r",
							"pm.test(\"Not found\")\r",
							"}\r",
							"\r",
							"else if(StatusCode==429){\r",
							"pm.test(\"Too many Request\")\r",
							"}\r",
							"\r",
							"else if(StatusCode==500){\r",
							"pm.test(\"Internal server error\")\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}